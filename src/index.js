import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import nunjucks from 'nunjucks';

// Configura√ß√£o de diret√≥rios
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.resolve(__dirname, '..');
const outputDir = path.join(rootDir, 'output');
const structuresDir = path.join(rootDir, 'structures');
const templatesDir = path.join(rootDir, 'templates');

// Configura√ß√£o do Nunjucks
nunjucks.configure(templatesDir, {
    autoescape: true,
    noCache: true
});

// Fun√ß√£o para limpar a pasta output
async function cleanOutput() {
    try {
        await fs.rm(outputDir, { recursive: true, force: true });
        await fs.mkdir(outputDir);
        console.log('‚úÖ Pasta output limpa com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao limpar pasta output:', error);
        throw error;
    }
}

// Fun√ß√£o para ler a estrutura JSON
async function readStructure(page) {
    try {
        const structure = await fs.readFile(path.join(structuresDir, `${page}.json`), 'utf-8');
        console.log(`‚úÖ Estrutura ${page}.json carregada com sucesso`);
        return JSON.parse(structure);
    } catch (error) {
        console.error(`‚ùå Erro ao ler estrutura ${page}.json:`, error);
        throw error;
    }
}

// Fun√ß√£o para ler o menu
async function readMenu() {
    try {
        const menu = await fs.readFile(path.join(structuresDir, 'menu.json'), 'utf-8');
        console.log('‚úÖ Menu carregado com sucesso');
        return JSON.parse(menu);
    } catch (error) {
        console.error('‚ùå Erro ao ler menu:', error);
        throw error;
    }
}

// Fun√ß√£o para copiar arquivos est√°ticos
async function copyStaticFiles() {
    try {
        // Cria a pasta assets no output
        const outputAssetsDir = path.join(outputDir, 'assets');
        await fs.mkdir(outputAssetsDir, { recursive: true });

        // Copia o arquivo CSS
        await fs.copyFile(
            path.join(rootDir, 'src', 'assets', 'styles.css'),
            path.join(outputAssetsDir, 'styles.css')
        );
        console.log('‚úÖ Arquivos est√°ticos copiados com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao copiar arquivos est√°ticos:', error);
        throw error;
    }
}

// Fun√ß√£o para gerar a p√°gina inicial
async function generateHomePage() {
    try {
        // Limpa a pasta output
        await cleanOutput();

        // Copia os arquivos est√°ticos
        await copyStaticFiles();

        // L√™ a estrutura da home e o menu
        const [homeStructure, menu] = await Promise.all([
            readStructure('home'),
            readMenu()
        ]);

        // Combina os dados da home com o menu
        const pageData = {
            ...homeStructure,
            menu
        };

        // Renderiza o template base.html com os dados combinados
        const html = nunjucks.render('base.html', pageData);
        await fs.writeFile(path.join(outputDir, 'index.html'), html);
        console.log('‚úÖ P√°gina inicial gerada com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao gerar p√°gina inicial:', error);
        throw error;
    }
}

// Fun√ß√£o principal
async function main() {
    try {
        console.log('üöÄ Iniciando gera√ß√£o de p√°ginas...');
        await generateHomePage();
        console.log('‚ú® Gera√ß√£o de p√°ginas conclu√≠da com sucesso!');
    } catch (error) {
        console.error('‚ùå Erro durante a gera√ß√£o de p√°ginas:', error);
        process.exit(1);
    }
}

// Executa o programa
main();
