import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Remove acentos de uma string, substituindo por caracteres similares sem acento
 * @param {string} str - String a ser processada
 * @returns {string} - String sem acentos
 */
function removeAccents(str) {
    const accentMap = {
        '√°': 'a', '√†': 'a', '√£': 'a', '√¢': 'a', '√§': 'a', '√•': 'a',
        '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
        '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
        '√≥': 'o', '√≤': 'o', '√µ': 'o', '√¥': 'o', '√∂': 'o',
        '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
        '√Ω': 'y', '√ø': 'y',
        '√±': 'n',
        '√ß': 'c',
        '√Å': 'A', '√Ä': 'A', '√É': 'A', '√Ç': 'A', '√Ñ': 'A', '√Ö': 'A',
        '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
        '√ç': 'I', '√å': 'I', '√é': 'I', '√è': 'I',
        '√ì': 'O', '√í': 'O', '√ï': 'O', '√î': 'O', '√ñ': 'O',
        '√ö': 'U', '√ô': 'U', '√õ': 'U', '√ú': 'U',
        '√ù': 'Y',
        '√ë': 'N',
        '√á': 'C'
    };
    
    return str.replace(/[√°√†√£√¢√§√•√©√®√™√´√≠√¨√Æ√Ø√≥√≤√µ√¥√∂√∫√π√ª√º√Ω√ø√±√ß√Å√Ä√É√Ç√Ñ√Ö√â√à√ä√ã√ç√å√é√è√ì√í√ï√î√ñ√ö√ô√õ√ú√ù√ë√á]/g, char => accentMap[char] || char);
}

/**
 * Normaliza uma tag: converte para min√∫sculas, remove acentos e substitui espa√ßos por tra√ßos
 * @param {string} tag - A tag a ser normalizada
 * @returns {string} - A tag normalizada
 */
function normalizeTag(tag) {
    return removeAccents(tag.toLowerCase()).replace(/\s+/g, '-');
}

/**
 * Processa o frontmatter de um arquivo markdown e normaliza as tags
 * @param {string} content - Conte√∫do do arquivo markdown
 * @returns {string} - Conte√∫do com tags normalizadas
 */
function processFrontmatter(content) {
    // Regex para encontrar o frontmatter (entre ---)
    const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
    const match = content.match(frontmatterRegex);
    
    if (!match) {
        return content; // Se n√£o h√° frontmatter, retorna o conte√∫do original
    }
    
    const frontmatter = match[1];
    let modified = false;
    
    // Regex para encontrar a se√ß√£o de tags
    const tagsRegex = /^tags:\s*\n((?:\s*-\s*"[^"]*"\s*\n?)*)/gm;
    const tagsMatch = frontmatter.match(tagsRegex);
    
    if (tagsMatch) {
        const tagsSection = tagsMatch[0];
        const tagLines = tagsSection.match(/^\s*-\s*"([^"]*)"\s*$/gm);
        
        if (tagLines) {
            const normalizedTags = tagLines.map(line => {
                const tagMatch = line.match(/^\s*-\s*"([^"]*)"\s*$/);
                if (tagMatch) {
                    const originalTag = tagMatch[1];
                    const normalizedTag = normalizeTag(originalTag);
                    if (originalTag !== normalizedTag) {
                        modified = true;
                    }
                    return `  - "${normalizedTag}"`;
                }
                return line;
            });
            
            if (modified) {
                const newTagsSection = 'tags:\n' + normalizedTags.join('\n');
                const newFrontmatter = frontmatter.replace(tagsRegex, newTagsSection);
                const newContent = content.replace(frontmatterRegex, `---\n${newFrontmatter}\n---\n\n`);
                return newContent;
            }
        }
    }
    
    return content;
}

/**
 * Processa um arquivo markdown individual
 * @param {string} filePath - Caminho do arquivo
 */
function processFile(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const processedContent = processFrontmatter(content);
        
        if (content !== processedContent) {
            fs.writeFileSync(filePath, processedContent, 'utf8');
            console.log(`‚úÖ Processado: ${path.basename(filePath)}`);
        } else {
            console.log(`‚è≠Ô∏è  Sem altera√ß√µes: ${path.basename(filePath)}`);
        }
    } catch (error) {
        console.error(`‚ùå Erro ao processar ${filePath}:`, error.message);
    }
}

/**
 * Processa todos os arquivos markdown em um diret√≥rio recursivamente
 * @param {string} dirPath - Caminho do diret√≥rio
 */
function processDirectory(dirPath) {
    try {
        const items = fs.readdirSync(dirPath);
        
        for (const item of items) {
            const fullPath = path.join(dirPath, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                processDirectory(fullPath);
            } else if (item.endsWith('.md')) {
                processFile(fullPath);
            }
        }
    } catch (error) {
        console.error(`‚ùå Erro ao processar diret√≥rio ${dirPath}:`, error.message);
    }
}

/**
 * Fun√ß√£o principal
 */
function main() {
    const contentDir = path.join(__dirname, '..', 'content');
    
    if (!fs.existsSync(contentDir)) {
        console.error(`‚ùå Diret√≥rio n√£o encontrado: ${contentDir}`);
        process.exit(1);
    }
    
    console.log('üöÄ Iniciando normaliza√ß√£o de tags...');
    console.log(`üìÅ Processando arquivos em: ${contentDir}`);
    console.log('');
    
    processDirectory(contentDir);
    
    console.log('');
    console.log('‚úÖ Normaliza√ß√£o de tags conclu√≠da!');
}

// Executa o script se for chamado diretamente
main();

export {
    normalizeTag,
    processFrontmatter,
    processFile,
    processDirectory
}; 
